{"version":3,"file":"react-aws-s3.js","sources":["../src/Date.ts","../src/Policy.ts","../src/Signature.ts","../src/react-aws-s3.ts","../src/ErrorThrower.ts","../src/Url.ts"],"sourcesContent":["import {DateISOString, DateYMD, XAmzDate } from \"./types\";\r\n\r\nexport const dateISOString: DateISOString = new Date(+new Date() + 864e5).toISOString();\r\nexport const xAmzDate: XAmzDate =  dateISOString.split(\"-\").join(\"\").split(\":\").join(\"\").split(\".\").join(\"\");\r\nexport const dateYMD: DateYMD = dateISOString.split(\"T\")[0].split(\"-\").join(\"\");\r\n","import { dateISOString, dateYMD, xAmzDate } from \"./Date\";\r\nimport { IConfig, Policy as PolicyType } from \"./types\";\r\n\r\nexport default class Policy {\r\n  public static getPolicy(config: IConfig): string {\r\n    const policy = (): PolicyType => {\r\n      return {\r\n        expiration: dateISOString,\r\n        conditions: [\r\n          { acl: \"public-read\" },\r\n          { bucket: config.bucketName },\r\n          [\"starts-with\", \"$key\", `${config.dirName ? config.dirName + \"/\" : \"\"}`],\r\n          [\"starts-with\", \"$Content-Type\", \"\"],\r\n          [\"starts-with\", \"$x-amz-meta-tag\", \"\"],\r\n          { \"x-amz-algorithm\": \"AWS4-HMAC-SHA256\" },\r\n          {\r\n            \"x-amz-credential\": `${config.accessKeyId}/${dateYMD}/${\r\n              config.region\r\n            }/s3/aws4_request`\r\n          },\r\n          { \"x-amz-date\": xAmzDate },\r\n          { \"x-amz-meta-uuid\": \"14365123651274\" },\r\n          { \"x-amz-server-side-encryption\": \"AES256\" }\r\n        ]\r\n      };\r\n    };\r\n    //Returns a base64 policy;\r\n    return new Buffer(JSON.stringify(policy())).toString(\"base64\").replace(/\\n|\\r/, \"\");\r\n  };\r\n};\r\n","import {IConfig, DateYMD} from \"./types\"\r\nimport Crypto, { WordArray } from \"crypto-js\";\r\n\r\nexport default class Signature {\r\n    public static getSignature(config: IConfig, date: DateYMD, policyBase64: string): string {\r\n        const getSignatureKey = (key: string, dateStamp: DateYMD, regionName: string): WordArray => {\r\n            const kDate: WordArray = Crypto.HmacSHA256(dateStamp, \"AWS4\" + key);\r\n            const kRegion: WordArray = Crypto.HmacSHA256(regionName, kDate);\r\n            const kService: WordArray = Crypto.HmacSHA256(\"s3\", kRegion);\r\n            const kSigning: WordArray = Crypto.HmacSHA256(\"aws4_request\", kService);\r\n            return kSigning;\r\n        };\r\n        const signature = (policyEncoded: string): string => {\r\n            return Crypto.HmacSHA256(\r\n                policyEncoded,\r\n                getSignatureKey(config.secretAccessKey, date, config.region)\r\n            ).toString(Crypto.enc.Hex);\r\n        };\r\n        return signature(policyBase64);\r\n    }\r\n}\r\n","import shortId from 'short-uuid';\r\nimport { dateYMD, xAmzDate } from \"./Date\";\r\nimport { IConfig, DeleteResponse, UploadResponse } from \"./types\";\r\nimport { throwError } from \"./ErrorThrower\";\r\nimport GetUrl from \"./Url\";\r\nimport Policy from \"./Policy\";\r\nimport Signature from \"./Signature\";\r\n\r\nclass ReactS3Client {\r\n    private config: IConfig;\r\n    constructor(config: IConfig) {\r\n      this.config = config;\r\n    }\r\n    public async uploadFile(file: File, newFileName?: string): Promise<UploadResponse> {\r\n      throwError(this.config, file);\r\n\r\n      const fd = new FormData();\r\n      const fileName: string = this.getFileNameWithExtension(file, newFileName);\r\n      const key: string = `${this.config.dirName ? this.config.dirName + \"/\" : \"\"}${fileName}`;\r\n      const url: string = GetUrl(this.config);\r\n      fd.append(\"key\", key);\r\n      fd.append(\"acl\", \"public-read\");\r\n      fd.append(\"Content-Type\", file.type);\r\n      fd.append(\"x-amz-meta-uuid\", \"14365123651274\");\r\n      fd.append(\"x-amz-server-side-encryption\", \"AES256\");\r\n      fd.append(\r\n          \"X-Amz-Credential\",\r\n          `${this.config.accessKeyId}/${dateYMD}/${this.config.region}/s3/aws4_request`\r\n      );\r\n      fd.append(\"X-Amz-Algorithm\", \"AWS4-HMAC-SHA256\");\r\n      fd.append(\"X-Amz-Date\", xAmzDate);\r\n      fd.append(\"x-amz-meta-tag\", \"\");\r\n      fd.append(\"Policy\", Policy.getPolicy(this.config));\r\n      fd.append(\r\n          \"X-Amz-Signature\",\r\n          Signature.getSignature(this.config, dateYMD, Policy.getPolicy(this.config))\r\n      );\r\n      fd.append(\"file\", file);\r\n\r\n      const data = await fetch(url, { method: \"post\", body: fd });\r\n      if (!data.ok) return Promise.reject(data);\r\n      return Promise.resolve({\r\n        bucket: this.config.bucketName,\r\n        key: `${this.config.dirName ? this.config.dirName + \"/\" : \"\"}${fileName}`,\r\n        location: `${url}/${this.config.dirName ? this.config.dirName + \"/\" : \"\"}${fileName}`,\r\n        status: data.status\r\n      });\r\n    }\r\n    public async deleteFile(fileName: string): Promise<DeleteResponse> {\r\n      const url: string = `https://${this.config.bucketName}.s3${\r\n        this.config.region ? \".\" + this.config.region : \"\"\r\n        }.amazonaws.com/${\r\n        this.config.dirName ? this.config.dirName + \"/\" : \"\"\r\n        }${fileName}`;\r\n\r\n      const deleteResult = await fetch(url, { method: \"delete\" });\r\n      if (!deleteResult.ok) return Promise.reject(deleteResult);\r\n      return Promise.resolve({\r\n        ok: deleteResult.ok,\r\n        status: deleteResult.status,\r\n        message: \"File Deleted\",\r\n        fileName: fileName\r\n      });\r\n    }\r\n    private getFileNameWithExtension(file: File, newFileName?: string): string {\r\n      if (newFileName && newFileName.includes(\".\")) {\r\n        return newFileName;\r\n      }\r\n      return `${newFileName || shortId.generate()}.${file.type.split(\"/\")[1]}`;\r\n    }\r\n}\r\n\r\nexport default ReactS3Client;\r\n","import { IConfig } from \"./types\";\r\n\r\nexport const throwError = (config: IConfig, file: File) => {\r\n  if (config.bucketName === null || config.bucketName === \"\") {\r\n    throw new Error(`Your bucketName cannot be empty `);\r\n  }\r\n  if (config.region === null || config.region === \"\") {\r\n    throw new Error(`Must provide a valide region in order to use your bucket`);\r\n  }\r\n  if (config.accessKeyId === null || config.accessKeyId === \"\") {\r\n    throw new Error(`Must provide accessKeyId`);\r\n  }\r\n  if (config.secretAccessKey === null || config.secretAccessKey === \"\") {\r\n    throw new Error(`Must provide secretAccessKey`);\r\n  }\r\n  if (!file) {\r\n    throw new Error(`File cannot be empty`);\r\n  }\r\n};\r\n","import { IConfig } from \"./types\";\r\n\r\nconst buildUrl = ({bucketName, region}: IConfig): string => {\r\n  const countryCode = region.split(\"-\")[0];\r\n\r\n  switch (countryCode) {\r\n    case \"cn\":\r\n      return `https://${bucketName}.s3.${region}.amazonaws.com.${countryCode}`;\r\n    default:\r\n      return `https://${bucketName}.s3.${region}.amazonaws.com`;\r\n  }\r\n}\r\n\r\nexport default (config: IConfig): string => {\r\n  if (config.s3Url && config.s3Url !== '') {\r\n    return config.s3Url;\r\n  }\r\n\r\n  return buildUrl(config);\r\n}\r\n"],"names":["dateISOString","Date","toISOString","xAmzDate","split","join","dateYMD","Policy","getPolicy","config","Buffer","JSON","stringify","bucket","bucketName","dirName","toString","replace","Signature","getSignature","date","policyBase64","key","dateStamp","regionName","kDate","kRegion","kService","Crypto","HmacSHA256","secretAccessKey","region","enc","Hex","ReactS3Client","constructor","uploadFile","file","newFileName","this","Error","accessKeyId","_this","fd","FormData","fileName","getFileNameWithExtension","url","s3Url","ref","countryCode","buildUrl","append","type","fetch","data","ok","Promise","resolve","status","reject","deleteFile","deleteResult","includes","shortId","generate"],"mappings":"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"}